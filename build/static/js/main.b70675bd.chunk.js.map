{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["qiniu","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","list","isManage","title","price","desc","image","fetch","then","response","json","data","setState","fiveList","Boolean","window","location","search","name","e","defineProperty","target","value","files","token","uploadToken","file","Array","prototype","slice","upload","subscribe","res","concat","_this$state","method","body","JSON","stringify","mode","headers","content-type","href","origin","react_default","a","createElement","className","onChange","bind","type","onClick","submit","map","item","key","id","alt","src","Component","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b70675bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nvar qiniu = require('qiniu-js')\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      list: [],\n      isManage: false,\n      title: '',\n      price: '',\n      desc: '',\n      image: ''\n    }\n  }\n  componentDidMount() {\n    const _this = this\n    fetch('http://localhost:3000/fives/list')\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(data) {\n        _this.setState({list: data.fiveList, isManage: Boolean(window.location.search)})\n      })\n  }\n  onChange(name, e) {\n    this.setState({[name]: e.target.value})\n  }\n  upload(e) {\n    const _this = this\n    const files = e.target.files\n    fetch('http://localhost:3000/uploadToken')\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(data) {\n        const token = data.uploadToken\n        const file = Array.prototype.slice.call(files)\n        const observable = qiniu.upload(file[0], file[0].name, token)\n        observable.subscribe((res) =>{_this.setState({image: `http://www.qiniu.cmty.xyz/${file[0].name}`})})\n      })\n    // qiniu.upload()\n  }\n  submit() {\n    const _this = this\n    const {title, price, desc, image} = this.state\n    fetch('http://localhost:3000/fives/create', {\n      method: 'post',\n      body: JSON.stringify({title, price, desc, image}),\n      mode: 'cors',\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(data) {\n        window.location.href = window.location.origin\n      })\n  }\n  render() {\n    const {isManage} = this.state\n    if (isManage) {\n      return <div className='create'>\n        <div className='inputWrap'>标题：<input onChange={this.onChange.bind(this, 'title')}/></div>\n        <div className='inputWrap'>描述：<input onChange={this.onChange.bind(this, 'desc')}/></div>\n        <div className='inputWrap'>价格：<input onChange={this.onChange.bind(this, 'price')}/></div>\n        <input type='file' name='file' onChange={this.upload.bind(this)} />\n        <button className='sub' onClick={this.submit.bind(this)}>提交</button>\n      </div>\n    }\n    return (\n      <div className=\"App\">\n        {\n          this.state.list.map(item => <div className='item' key={item.id}>\n            <img className='image' alt='' id='img' src={item.image} />\n            <div className='info'>\n              <div className='titleWrap'>\n                <div className='title'><b>{item.title}</b></div>\n                <div>{item.desc}</div>\n              </div>\n              <span className='price'>{item.price}元</span>\n            </div>\n          </div>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}